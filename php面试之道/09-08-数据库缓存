# 数据库缓存

- - [简介](https://www.kancloud.cn/idcpj/php_interview/610460#_2)

  - [优点](https://www.kancloud.cn/idcpj/php_interview/610460#_5)

  - [常见的缓存形式](https://www.kancloud.cn/idcpj/php_interview/610460#_9)

  - [启用 MYSQL查询缓存](https://www.kancloud.cn/idcpj/php_interview/610460#_MYSQL_13)

  - - [`query_cache_ type`](https://www.kancloud.cn/idcpj/php_interview/610460#query_cache__type_15)
    - [`query_ cache_size`](https://www.kancloud.cn/idcpj/php_interview/610460#query__cache_size_28)
    - [注意事项](https://www.kancloud.cn/idcpj/php_interview/610460#_32)
    - [清理缓存](https://www.kancloud.cn/idcpj/php_interview/610460#_38)

  - [使用 Memcache缓存查询数据](https://www.kancloud.cn/idcpj/php_interview/610460#_Memcache_43)

  - - [工作原理](https://www.kancloud.cn/idcpj/php_interview/610460#_46)
    - [方法](https://www.kancloud.cn/idcpj/php_interview/610460#_49)

  - [使用 Redis绶存查询数据](https://www.kancloud.cn/idcpj/php_interview/610460#_Redis_54)

  - - [与 Memcache的区别](https://www.kancloud.cn/idcpj/php_interview/610460#_Memcache_55)

## 简介

MysαL等一些常见的关系型数据库的数据都存储在磁盘当中,在高并发场景下,业务应用对 MYSQL产生的增、删、改、查的操作造成巨大的I/O开销和查询压力,这无疑对数据库和服务器都是一种巨大的压力,为了解决此类问题,缓存数据的概念应运而生。

## 优点

极大地解决数据库服务器的压力
提高应用数据的响应速度

## 常见的缓存形式

内存缓存,文件缓存

## 启用 MYSQL查询缓存

极大地降低CPU使用率

### `query_cache_ type`

查询缓存类型,有0、1、2三个取值。

- 0则不使用查询缓存。
- 1表示始终使用查询缓存。

```
//对某一条不进行缓存
SELECT SQL_NO_ CACHE* FROM my_table WHERE condition
```

- 2表示按需使用查询缓存。

```
//在需要缓存时,添加SQL_CACHE
SELECT SQL_CACHE * FROM my_table WHERE condition;
```

### `query_ cache_size`

默认情况下 query_cache_size为0,表示为查询缓存预留的内存为0,无法使用查询缓存
`SET GLOBAL query cache size =134217728;`

### 注意事项

查询缓存可以看做是SQL文本和查询结果的映射
第二次查询的SQL和第一次查询的SQL完全相同,则会使用缓存
`SHOW STATUS LIKE 'Qcache_hits;`查看命中次数
表的结构或数据发生改变时,查询缓存中的数据不再有效

### 清理缓存

`FLUSH QUERY CACHE;`∥/清理查询缓存内存碎片
`RESET QUERY CACHE;`/从查询缓存中移出所有查询
`FLUSH TABLES;`//关闭所有打开的表,同时该操作将会清空查询缓存中的内容

## 使用 Memcache缓存查询数据

对于大型站点,如果没有中间缓存层,当流量打入数据库层时,即便有之前的几层为我们挡住一部分流量,但是在大并发的情况下,还是会有大量请求涌入数据库层,这样对于数据库服务器的压力冲击很大,响应速度也会下降,因此添加中间缓存层很有必要。

### 工作原理

Memcache是一个高性能的分布式的内存对象缓存系统,通过在内存里维护一个统一的巨大的hash表,它能够用来存储各种格式的数据,包括图像、视频、文件以及数据库检索的结果等。简单的说就是将数据调用到内存,然后从内存中读取,从而大大提高读取速度

### 方法

获取:`get(key)`
设置:`set(key,val, expire)`
删除: `delete(key)`

## 使用 Redis绶存查询数据

### 与 Memcache的区别

- 性能相差不大
- Redis在2.0版本后增加了自己的VM特性,突破物理内存的限制,Memcache可以修改最大可用内存采用LRU算法
- Redis,依赖客户端来实现分布式读写
- Memcache本身没有数据冗余机制
- Redis支持(快照、AOF),依赖快照进行持久化,aof增强了可靠性的同时,对性能有所影响
- Memcache不支持持久化,通常做缓存,提升性能;
- Memcache在并发场景下,用cas保证一致性, redis事务支持比较弱,只能保证事务中的每个操作连续执行较弱,只能保证事务中的毎个操作连续执行
- Redis支持多种类的数据类型
- Redis用于数据量较小的高性能操作和运算上
- Memcache用于在动态系统中减少数据库负载,提升性能;适合做缓存,提高性能

上一篇：[并发处理](https://www.kancloud.cn/idcpj/php_interview/610450)下一篇：[Web服务器的负载均衡-ngnix 反向 代理](https://www.kancloud.cn/idcpj/php_interview/610461)